#!/bin/sh
### BEGIN INIT INFO
# Provides:          jasmin sms gateway interceptor startup script
# Required-Start:    $remote_fs $local_fs
# Required-Stop:     $remote_fs $local_fs
# Should-Start:      $network $named
# Should-Stop:       $network $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Jasmin SMS Gateway Interceptor
# Description:       Jasmin's interceptor is used to intercept MO and MT
#		     messages before routing.
### END INIT INFO

VERBOSE='yes'
NAME='interceptord'
COMMAND_ARGS=''

echo "WARNING: This script will be removed in upcoming major release, please use systemd to manage $NAME service."

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="$NAME system service"
DAEMON=/usr/bin/python
PIDDIR=/var/run
PIDFILE="$PIDDIR/$NAME.pid"
LOGDIR=/var/log/jasmin
LOGFILE="$LOGDIR/twistd-$NAME.log"
SCRIPTNAME="/etc/init.d/$NAME"
USER=jasmin
GROUP=jasmin

# Exit if USER or GROUP do not exist
getent passwd "$USER" >/dev/null || exit 11
getent group "$GROUP" >/dev/null || exit 12

# Exit if the interceptord.py is not found
COMMAND="/usr/bin/interceptord"
[ -x $COMMAND ] || COMMAND="/usr/local/bin/interceptord.py"
[ -x $COMMAND ] || exit 21

# Exit if the package is not installed
[ -x $DAEMON ] || exit 22

# Exit if system folders do not exist or could not be created
[ -d $PIDDIR ] || mkdir $PIDDIR
[ -d $PIDDIR ] || exit 31
[ -d $LOGDIR ] || mkdir $LOGDIR
[ -d $LOGDIR ] || exit 32

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Provided by redhat-lsb-core:
. /lib/lsb/init-functions

# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	local pids=$(ps ax|grep "$NAME"|grep "$DAEMON")
	[ -z "$pids" ] || return 1

	su -s /bin/bash $USER -c "$DAEMON $COMMAND $COMMAND_ARGS" &
	[ "$?" -eq "0" ] || return 2
	echo "$!" > "$PIDFILE"

	# Check if its running
	local pids=$(ps ax|grep "$NAME"|grep "$DAEMON")
	[ -z "$pids" ] && return 2

	return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	killproc -p "$PIDFILE" "$DAEMON"
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2

	# Many daemons don't delete their pidfiles when they exit.
	[ "$RETVAL" = 0 ] && rm -f "$PIDFILE"

	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	echo "NOT IMPLEMENTED YET"
	return 1
}

case "$1" in
	start)
		MSG="Starting $DESC $NAME"
		do_start
		RETVAL="$?"
		case "$RETVAL" in
			0|1) [ "$VERBOSE" != no ] && log_success_msg $MSG ;;
			2) [ "$VERBOSE" != no ] && log_failure_msg $MSG ;;
		esac

		exit $RETVAL
	;;
	stop)
		MSG="Stopping $DESC $NAME"
		do_stop
		RETVAL="$?"
		case "$RETVAL" in
			0|1) [ "$VERBOSE" != no ] && log_success_msg $MSG ;;
			2) [ "$VERBOSE" != no ] && log_failure_msg $MSG ;;
		esac

		exit $RETVAL
	;;
	status)
		MSG="$DESC Status"
		pidofproc -p "$PIDFILE" "$DAEMON"
		RETVAL="$?"
		[ "$RETVAL" = 0 ] && log_success_msg $MSG || log_failure_msg $MSG

		exit $RETVAL
	;;
	#reload|force-reload)
	#	NOT IMPLEMENTED
	#;;
	restart|force-reload)
		#
		# If the "reload" option is implemented then remove the
		# 'force-reload' alias
		#
		MSG="Restarting $DESC $NAME"
		do_stop
		RETVAL="$?"
		case "$RETVAL" in
			0|1)
				do_start
				case "$?" in
					0) log_success_msg $MSG ;;
					1) log_failure_msg $MSG ;; # Old process is still running
					*) log_failure_msg $MSG ;; # Failed to start
				esac
			;;
			*)
				# Failed to stop
				log_failure_msg $MSG
			;;
		esac

		exit $RETVAL
		;;
	*)
		echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
		exit 3
	;;
esac

:
